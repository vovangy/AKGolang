// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -source=main.go -destination=mock_client.go -package=main
//

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockExchanger is a mock of Exchanger interface.
type MockExchanger struct {
	ctrl     *gomock.Controller
	recorder *MockExchangerMockRecorder
}

// MockExchangerMockRecorder is the mock recorder for MockExchanger.
type MockExchangerMockRecorder struct {
	mock *MockExchanger
}

// NewMockExchanger creates a new mock instance.
func NewMockExchanger(ctrl *gomock.Controller) *MockExchanger {
	mock := &MockExchanger{ctrl: ctrl}
	mock.recorder = &MockExchangerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchanger) EXPECT() *MockExchangerMockRecorder {
	return m.recorder
}

// GetCandlesHistory mocks base method.
func (m *MockExchanger) GetCandlesHistory(pair string, limit int, start, end time.Time) (CandlesHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCandlesHistory", pair, limit, start, end)
	ret0, _ := ret[0].(CandlesHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCandlesHistory indicates an expected call of GetCandlesHistory.
func (mr *MockExchangerMockRecorder) GetCandlesHistory(pair, limit, start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCandlesHistory", reflect.TypeOf((*MockExchanger)(nil).GetCandlesHistory), pair, limit, start, end)
}

// MockIndicator is a mock of Indicator interface.
type MockIndicator struct {
	ctrl     *gomock.Controller
	recorder *MockIndicatorMockRecorder
}

// MockIndicatorMockRecorder is the mock recorder for MockIndicator.
type MockIndicatorMockRecorder struct {
	mock *MockIndicator
}

// NewMockIndicator creates a new mock instance.
func NewMockIndicator(ctrl *gomock.Controller) *MockIndicator {
	mock := &MockIndicator{ctrl: ctrl}
	mock.recorder = &MockIndicatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndicator) EXPECT() *MockIndicatorMockRecorder {
	return m.recorder
}

// EMA mocks base method.
func (m *MockIndicator) EMA() []float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EMA")
	ret0, _ := ret[0].([]float64)
	return ret0
}

// EMA indicates an expected call of EMA.
func (mr *MockIndicatorMockRecorder) EMA() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EMA", reflect.TypeOf((*MockIndicator)(nil).EMA))
}

// MACD mocks base method.
func (m *MockIndicator) MACD() ([]float64, []float64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MACD")
	ret0, _ := ret[0].([]float64)
	ret1, _ := ret[1].([]float64)
	return ret0, ret1
}

// MACD indicates an expected call of MACD.
func (mr *MockIndicatorMockRecorder) MACD() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MACD", reflect.TypeOf((*MockIndicator)(nil).MACD))
}

// RSI mocks base method.
func (m *MockIndicator) RSI(period int) ([]float64, []float64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RSI", period)
	ret0, _ := ret[0].([]float64)
	ret1, _ := ret[1].([]float64)
	return ret0, ret1
}

// RSI indicates an expected call of RSI.
func (mr *MockIndicatorMockRecorder) RSI(period any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RSI", reflect.TypeOf((*MockIndicator)(nil).RSI), period)
}

// SMA mocks base method.
func (m *MockIndicator) SMA(period int) []float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SMA", period)
	ret0, _ := ret[0].([]float64)
	return ret0
}

// SMA indicates an expected call of SMA.
func (mr *MockIndicatorMockRecorder) SMA(period any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SMA", reflect.TypeOf((*MockIndicator)(nil).SMA), period)
}

// StochPrice mocks base method.
func (m *MockIndicator) StochPrice() ([]float64, []float64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StochPrice")
	ret0, _ := ret[0].([]float64)
	ret1, _ := ret[1].([]float64)
	return ret0, ret1
}

// StochPrice indicates an expected call of StochPrice.
func (mr *MockIndicatorMockRecorder) StochPrice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StochPrice", reflect.TypeOf((*MockIndicator)(nil).StochPrice))
}

// StochRSI mocks base method.
func (m *MockIndicator) StochRSI(rsiPeriod int) ([]float64, []float64) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StochRSI", rsiPeriod)
	ret0, _ := ret[0].([]float64)
	ret1, _ := ret[1].([]float64)
	return ret0, ret1
}

// StochRSI indicates an expected call of StochRSI.
func (mr *MockIndicatorMockRecorder) StochRSI(rsiPeriod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StochRSI", reflect.TypeOf((*MockIndicator)(nil).StochRSI), rsiPeriod)
}

// MockGeneralIndicatorer is a mock of GeneralIndicatorer interface.
type MockGeneralIndicatorer struct {
	ctrl     *gomock.Controller
	recorder *MockGeneralIndicatorerMockRecorder
}

// MockGeneralIndicatorerMockRecorder is the mock recorder for MockGeneralIndicatorer.
type MockGeneralIndicatorerMockRecorder struct {
	mock *MockGeneralIndicatorer
}

// NewMockGeneralIndicatorer creates a new mock instance.
func NewMockGeneralIndicatorer(ctrl *gomock.Controller) *MockGeneralIndicatorer {
	mock := &MockGeneralIndicatorer{ctrl: ctrl}
	mock.recorder = &MockGeneralIndicatorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeneralIndicatorer) EXPECT() *MockGeneralIndicatorerMockRecorder {
	return m.recorder
}

// GetData mocks base method.
func (m *MockGeneralIndicatorer) GetData(pair string, period int, from, to time.Time, indicator Indicatorer) ([]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", pair, period, from, to, indicator)
	ret0, _ := ret[0].([]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData.
func (mr *MockGeneralIndicatorerMockRecorder) GetData(pair, period, from, to, indicator any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockGeneralIndicatorer)(nil).GetData), pair, period, from, to, indicator)
}

// MockIndicatorer is a mock of Indicatorer interface.
type MockIndicatorer struct {
	ctrl     *gomock.Controller
	recorder *MockIndicatorerMockRecorder
}

// MockIndicatorerMockRecorder is the mock recorder for MockIndicatorer.
type MockIndicatorerMockRecorder struct {
	mock *MockIndicatorer
}

// NewMockIndicatorer creates a new mock instance.
func NewMockIndicatorer(ctrl *gomock.Controller) *MockIndicatorer {
	mock := &MockIndicatorer{ctrl: ctrl}
	mock.recorder = &MockIndicatorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndicatorer) EXPECT() *MockIndicatorerMockRecorder {
	return m.recorder
}

// GetData mocks base method.
func (m *MockIndicatorer) GetData(pair string, limit, period int, from, to time.Time) ([]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", pair, limit, period, from, to)
	ret0, _ := ret[0].([]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData.
func (mr *MockIndicatorerMockRecorder) GetData(pair, limit, period, from, to any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockIndicatorer)(nil).GetData), pair, limit, period, from, to)
}
