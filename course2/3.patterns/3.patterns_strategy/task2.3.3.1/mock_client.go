// Code generated by MockGen. DO NOT EDIT.
// Source: main.go
//
// Generated by this command:
//
//	mockgen -source=main.go -destination=mock_client.go -package=main
//

// Package main is a generated GoMock package.
package main

import (
	context "context"
	reflect "reflect"

	github "github.com/google/go-github/v53/github"
	gomock "go.uber.org/mock/gomock"
)

// MockGithubLister is a mock of GithubLister interface.
type MockGithubLister struct {
	ctrl     *gomock.Controller
	recorder *MockGithubListerMockRecorder
}

// MockGithubListerMockRecorder is the mock recorder for MockGithubLister.
type MockGithubListerMockRecorder struct {
	mock *MockGithubLister
}

// NewMockGithubLister creates a new mock instance.
func NewMockGithubLister(ctrl *gomock.Controller) *MockGithubLister {
	mock := &MockGithubLister{ctrl: ctrl}
	mock.recorder = &MockGithubListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGithubLister) EXPECT() *MockGithubListerMockRecorder {
	return m.recorder
}

// GetItems mocks base method.
func (m *MockGithubLister) GetItems(ctx context.Context, username string) ([]Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems", ctx, username)
	ret0, _ := ret[0].([]Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItems indicates an expected call of GetItems.
func (mr *MockGithubListerMockRecorder) GetItems(ctx, username any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockGithubLister)(nil).GetItems), ctx, username)
}

// MockGeneralGithubLister is a mock of GeneralGithubLister interface.
type MockGeneralGithubLister struct {
	ctrl     *gomock.Controller
	recorder *MockGeneralGithubListerMockRecorder
}

// MockGeneralGithubListerMockRecorder is the mock recorder for MockGeneralGithubLister.
type MockGeneralGithubListerMockRecorder struct {
	mock *MockGeneralGithubLister
}

// NewMockGeneralGithubLister creates a new mock instance.
func NewMockGeneralGithubLister(ctrl *gomock.Controller) *MockGeneralGithubLister {
	mock := &MockGeneralGithubLister{ctrl: ctrl}
	mock.recorder = &MockGeneralGithubListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeneralGithubLister) EXPECT() *MockGeneralGithubListerMockRecorder {
	return m.recorder
}

// GetItems mocks base method.
func (m *MockGeneralGithubLister) GetItems(ctx context.Context, username string, strategy GithubLister) ([]Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItems", ctx, username, strategy)
	ret0, _ := ret[0].([]Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItems indicates an expected call of GetItems.
func (mr *MockGeneralGithubListerMockRecorder) GetItems(ctx, username, strategy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItems", reflect.TypeOf((*MockGeneralGithubLister)(nil).GetItems), ctx, username, strategy)
}

// MockRepoLister is a mock of RepoLister interface.
type MockRepoLister struct {
	ctrl     *gomock.Controller
	recorder *MockRepoListerMockRecorder
}

// MockRepoListerMockRecorder is the mock recorder for MockRepoLister.
type MockRepoListerMockRecorder struct {
	mock *MockRepoLister
}

// NewMockRepoLister creates a new mock instance.
func NewMockRepoLister(ctrl *gomock.Controller) *MockRepoLister {
	mock := &MockRepoLister{ctrl: ctrl}
	mock.recorder = &MockRepoListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoLister) EXPECT() *MockRepoListerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockRepoLister) List(ctx context.Context, username string, opt *github.RepositoryListOptions) ([]*github.Repository, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, username, opt)
	ret0, _ := ret[0].([]*github.Repository)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockRepoListerMockRecorder) List(ctx, username, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepoLister)(nil).List), ctx, username, opt)
}

// MockGistLister is a mock of GistLister interface.
type MockGistLister struct {
	ctrl     *gomock.Controller
	recorder *MockGistListerMockRecorder
}

// MockGistListerMockRecorder is the mock recorder for MockGistLister.
type MockGistListerMockRecorder struct {
	mock *MockGistLister
}

// NewMockGistLister creates a new mock instance.
func NewMockGistLister(ctrl *gomock.Controller) *MockGistLister {
	mock := &MockGistLister{ctrl: ctrl}
	mock.recorder = &MockGistListerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGistLister) EXPECT() *MockGistListerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockGistLister) List(ctx context.Context, username string, opt *github.GistListOptions) ([]*github.Gist, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, username, opt)
	ret0, _ := ret[0].([]*github.Gist)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockGistListerMockRecorder) List(ctx, username, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGistLister)(nil).List), ctx, username, opt)
}
